name: CI/CD Pipeline with Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Security and Quality Checks
  frontend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint Security Check
      run: npm run lint
    
    - name: Run TypeScript Check
      run: npm run type-check
    
    - name: Run npm audit
      run: npm run security:audit
    
    - name: Run Snyk Security Test
      run: npm run security:snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    - name: Run audit-ci
      run: npm run security:audit-ci

  # Frontend Testing
  frontend-tests:
    runs-on: ubuntu-latest
    needs: frontend-security
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
    
    - name: Run E2E tests
      run: npm run test:e2e:headless
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: ./frontend/cypress/screenshots

  # Backend Security and Quality Checks
  backend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./linux_patching_cli
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run Black formatter check
      run: black --check .
    
    - name: Run isort check
      run: isort --check-only .
    
    - name: Run flake8 linting
      run: flake8 .
    
    - name: Run mypy type checking
      run: mypy .
    
    - name: Run bandit security check
      run: bandit -r . -x tests/
    
    - name: Run safety check
      run: safety check
    
    - name: Run semgrep security scan
      run: |
        pip install semgrep
        semgrep --config=auto .

  # Backend Testing
  backend-tests:
    runs-on: ubuntu-latest
    needs: backend-security
    defaults:
      run:
        working-directory: ./linux_patching_cli
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run pytest with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./linux_patching_cli
        flags: backend

  # Frontend Build
  frontend-build:
    runs-on: ubuntu-latest
    needs: [frontend-security, frontend-tests]
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build:secure
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd linux_patching_cli
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        # Start backend server in background
        cd linux_patching_cli
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        
        # Wait for server to start
        sleep 10
        
        # Run integration tests
        cd ../frontend
        npm run test:integration

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, python

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment steps here
        # e.g., deploy to AWS, Azure, or your preferred platform
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment steps here

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "Pipeline completed successfully!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed!"
        # Add failure notification logic