name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Security Scan
  frontend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test
    
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif
    
    - name: Run ESLint Security Scanner
      run: npm run lint -- --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
      continue-on-error: true
    
    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ./frontend/eslint-results.sarif

  # Backend Security Scan
  backend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./linux_patching_cli
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit[toml] safety semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-results.json
      continue-on-error: true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: ./linux_patching_cli/bandit-results.json
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true
    
    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: ./linux_patching_cli/safety-results.json
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-results.json .
      continue-on-error: true
    
    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: semgrep-results
        path: ./linux_patching_cli/semgrep-results.json

  # Container Security Scan
  container-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t linux-patching-app:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'linux-patching-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Anchore Container Scan
      uses: anchore/scan-action@v3
      with:
        image: 'linux-patching-app:latest'
        fail-build: false
        severity-cutoff: high
    
    - name: Upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd linux_patching_cli
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Linux Patching Automation'
        path: '.'
        format: 'ALL'
        out: 'dependency-check-results'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-results
        path: dependency-check-results

  # License Check
  license-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Check frontend licenses
      run: |
        cd frontend
        npx license-checker --production --json --out licenses-frontend.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install backend dependencies
      run: |
        cd linux_patching_cli
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses
    
    - name: Check backend licenses
      run: |
        cd linux_patching_cli
        pip-licenses --format=json --output-file=licenses-backend.json
    
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          ./frontend/licenses-frontend.json
          ./linux_patching_cli/licenses-backend.json

  # Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [frontend-security, backend-security, dependency-check, license-check]
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security report
      run: |
        mkdir -p security-report
        
        echo "# Security Scan Report" > security-report/README.md
        echo "" >> security-report/README.md
        echo "Generated on: $(date)" >> security-report/README.md
        echo "" >> security-report/README.md
        
        echo "## Frontend Security" >> security-report/README.md
        echo "- npm audit results available" >> security-report/README.md
        echo "- Snyk scan completed" >> security-report/README.md
        echo "- ESLint security rules checked" >> security-report/README.md
        echo "" >> security-report/README.md
        
        echo "## Backend Security" >> security-report/README.md
        echo "- Bandit security scan completed" >> security-report/README.md
        echo "- Safety vulnerability check completed" >> security-report/README.md
        echo "- Semgrep analysis completed" >> security-report/README.md
        echo "" >> security-report/README.md
        
        echo "## Dependency Check" >> security-report/README.md
        echo "- OWASP dependency check completed" >> security-report/README.md
        echo "- License compliance verified" >> security-report/README.md
        echo "" >> security-report/README.md
        
        echo "## Action Required" >> security-report/README.md
        echo "Review all scan results and address any high-severity vulnerabilities." >> security-report/README.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report/
    
    - name: Create Issue on Security Findings
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Security Scan Findings',
            body: `
              Security scan found potential vulnerabilities.
              
              **Scan Date:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              Please review the scan results and take appropriate action.
              
              [View Results](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `,
            labels: ['security', 'high-priority']
          })